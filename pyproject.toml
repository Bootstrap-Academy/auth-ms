[tool.poetry]
name = "auth-ms"
version = "2.1.1"
description = ""
authors = ["Defelo <defelo@the-morpheus.de>"]
readme = "README.md"
homepage = "https://github.com/Bootstrap-Academy/auth-ms"
repository = "https://github.com/Bootstrap-Academy/auth-ms"
packages = [{ include = "api" }]
include = ["pyproject.toml", "templates/*"]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.108.0"
uvicorn = "^0.26.0"
aiohttp = "^3.9.1"
SQLAlchemy = "^1.4.42"
aiomysql = "^0.2.0"
asyncpg = "^0.29.0"
sentry-sdk = "^1.39.2"
pydantic = "^1.10.13"
httpx = "^0.26.0"
argon2-cffi = "^23.1.0"
PyJWT = "^2.8.0"
starlette = "^0.32.0"
alembic = "^1.13.1"
pyotp = "^2.9.0"
jq = "^1.6.0"
aiosmtplib = "^3.0.1"
email-validator = "^2.1.0"
Jinja2 = "^3.1.3"
redis = "^5.0.1"

[tool.poetry.group.dev.dependencies]
flake8 = "^7.0.0"
isort = "^5.13.2"
black = "^23.12.1"
wemake-python-styleguide = "^0.18.0"
mypy = "^1.8"
SQLAlchemy = { extras = ["mypy"], version = "^1.4.42" }
pytest = "^7.4.4"
coverage = "^7.4"
pytest-asyncio = "^0.23.3"
pytest-mock = "^3.12.0"
aiosqlite = "^0.19.0"
rich = "^13.7.0"
ruff = "^0.1.13"

[tool.poetry.scripts]
api = "api.main:main"
alembic = "alembic.config:main"

[tool.poe.tasks]
api = { script = "api.main:main", envfile = ".env" }
flake8 = "flake8 . --count --statistics --show-source"
isort = "isort ."
black = "black ."
format = ["isort", "black"]
mypy = "mypy ."
ruff = "ruff . --line-length 120"
lint = ["format", "ruff", "mypy", "flake8"]
test = "pytest -v tests"
pre-commit = ["lint", "coverage"]
alembic = { cmd = "alembic", envfile = ".env" }
migrate = { cmd = "alembic upgrade head", envfile = ".env" }
env = { cmd = """python -c 'from api.settings import settings; from rich import print; print(settings)'""", envfile = ".env" }
jwt = { cmd = """python -c 'from api.utils import jwt; import sys, json; print(jwt.encode_jwt(json.loads(sys.argv[1]), jwt.timedelta(seconds=int(sys.argv[2]))))'""", envfile = ".env" }
hash-password = """python -c 'from api.utils.passwords import password_hasher; import sys, getpass; print(password_hasher.hash(sys.argv[1] if len(sys.argv) > 1 else getpass.getpass()))'"""

[tool.poe.tasks.coverage]
shell = """
set -e
coverage run -m pytest -v tests
if [[ "$check" != True ]]; then fail="--fail-under=0"; fi
if ! coverage report $fail; then c=2; fi
if [[ "$xml" = True ]]; then coverage xml --fail-under=0; fi
if [[ "$html" = True ]]; then coverage html --fail-under=0 && xdg-open htmlcov/index.html; fi
if [[ "$clean" = True ]]; then coverage erase; fi
exit $c
"""
interpreter = "bash"

[tool.poe.tasks.coverage.args.xml]
options = ["--xml"]
type = "boolean"

[tool.poe.tasks.coverage.args.html]
options = ["--html"]
type = "boolean"

[tool.poe.tasks.coverage.args.clean]
options = ["--no-clean"]
type = "boolean"
default = true

[tool.poe.tasks.coverage.args.check]
options = ["--no-check"]
type = "boolean"
default = true

[tool.poe.tasks.setup]
shell = """
set -ex
poetry install --sync
if ! [[ -e .env ]]; then cp dev.env .env; fi
"""
interpreter = "bash"

[tool.black]
target-version = ["py311"]
line-length = 120
skip-magic-trailing-comma = true

[tool.isort]
profile = "black"
py_version = 311
line_length = 120
lines_after_imports = 2
reverse_relative = true
known_local_folder = ["api", "tests"]
sections = ["FUTURE", "STDLIB", "FIRSTPARTY", "THIRDPARTY", "LOCALFOLDER"]

[tool.mypy]
strict = true
ignore_missing_imports = true
plugins = ["sqlalchemy.ext.mypy.plugin"]
exclude = ['^alembic/env\.py$']

[tool.pytest.ini_options]
asyncio_mode = "auto"
markers = ["user_params"]

[tool.coverage.run]
branch = true
source = ["api"]
omit = ["api/__main__.py", "tests/*"]
concurrency = ["thread", "greenlet"]

[tool.coverage.report]
exclude_lines = ["if TYPE_CHECKING:", "if settings.debug:"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
